package org.ionnic.core;import java.io.IOException;import java.util.Locale;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import javax.servlet.http.HttpServletResponse;import org.ionnic.core.bean.FilterConfig;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.web.context.ContextLoader;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.filter.GenericFilterBean;/** * @author apple */public class Filter extends GenericFilterBean {	Logger logger = LoggerFactory.getLogger(Filter.class);	private FilterConfig config;	@Override	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {		HttpServletRequest request = (HttpServletRequest) req;		HttpServletResponse response = (HttpServletResponse) res;		request.setAttribute("filter", config.getClass().getName());		if (config.getCharset() != null && (config.isForceEncoding() || request.getCharacterEncoding() == null)) {			request.setCharacterEncoding(config.getCharset());			if (config.isForceEncoding()) {				response.setCharacterEncoding(config.getCharset());			}		}		if (!config.isIgnoreMethod()) {			String methodField = config.getMethodField();			String methodType = request.getParameter(methodField);			if (isLegalMethodType(methodType)) {				final String method = methodType.toUpperCase(Locale.ENGLISH);				request = new HttpServletRequestWrapper(request) {					@Override					public String getMethod() {						return method;					}				};				request.getHeader("Referer");			}		}		chain.doFilter(request, response);	}	@Override	protected void initFilterBean() throws ServletException {		// TODO Auto-generated method stub		if (null == config) {			if (logger.isDebugEnabled()) {				logger.debug("Initializing fiterBean config.");			}			WebApplicationContext wac = ContextLoader.getCurrentWebApplicationContext();			config = wac.getBean(FilterConfig.class);		}	}	/**	 * @param method	 * @return	 */	protected boolean isLegalMethodType(String method) {		String[] allowMethod = new String[] { "GET", "POST", "DELETE", "PUT" };		for (String item : allowMethod) {			if (item.equalsIgnoreCase(method)) {				return true;			}		}		return false;	}}