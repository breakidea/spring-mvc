package org.ionnic.core.support;import java.io.IOException;import java.util.Locale;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import javax.servlet.http.HttpServletResponse;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import org.springframework.util.StringUtils;import org.springframework.web.filter.OncePerRequestFilter;public class Filter extends OncePerRequestFilter {	private static final Log logger = LogFactory.getLog(Filter.class);		private String encoding = "utf-8";	private boolean forceEncoding = false;	private String methodParam;	@Override	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException,			IOException {		if (this.getEncoding() != null && (this.forceEncoding || request.getCharacterEncoding() == null)) {			request.setCharacterEncoding(this.getEncoding());			if (this.forceEncoding) {				response.setCharacterEncoding(this.getEncoding());			}			logger.info("set Character Encoding: " + this.getEncoding());		}		filterChain.doFilter(request, response);	}	protected void doHiddenHttpMethod(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException,			IOException {		String paramValue = request.getParameter(methodParam);		if ("POST".equals(request.getMethod()) && StringUtils.hasLength(paramValue)) {			String method = paramValue.toUpperCase(Locale.ENGLISH);			HttpServletRequest wrapper = new HttpMethodRequestWrapper(request, method);			filterChain.doFilter(wrapper, response);		} else {			filterChain.doFilter(request, response);		}	}	public String getEncoding() {		return encoding;	}	public void setEncoding(String encoding) {		this.encoding = encoding;		System.out.println(1111);	}	private static class HttpMethodRequestWrapper extends HttpServletRequestWrapper {		private final String method;		public HttpMethodRequestWrapper(HttpServletRequest request, String method) {			super(request);			this.method = method;		}		@Override		public String getMethod() {			return this.method;		}	}}