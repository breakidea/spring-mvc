package org.ionnic.config.view;/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *   http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */import java.io.IOException;import java.io.StringWriter;import java.io.Writer;import java.util.ArrayList;import java.util.List;import org.apache.velocity.context.InternalContextAdapter;import org.apache.velocity.exception.TemplateInitException;import org.apache.velocity.exception.VelocityException;import org.apache.velocity.runtime.RuntimeConstants;import org.apache.velocity.runtime.RuntimeServices;import org.apache.velocity.runtime.directive.Block;import org.apache.velocity.runtime.log.Log;import org.apache.velocity.runtime.parser.node.Node;/** * Directive that puts an unrendered AST block in the context under the specified key, postponing rendering until the * reference is used and rendered. *  * @author Andrew Tetlaw * @author Nathan Bubna * @version $Id: Define.java 686842 2008-08-18 18:29:31Z nbubna $ */public class BlockDirective extends Block {	public static final String DEFINE_DIRECTIVE = BlockDirective.class.getName();	/**	 * @param out	 * @return	 * @throws IOException	 */	private String clearLine(Writer out) throws IOException {		Writer result = new StringWriter();		String[] items = (out.toString()).split("\n");		for (String item : items) {			if (item.indexOf("    ") == 0) {				item = item.substring(4);			}			result.write(item + "\n");		}		return result.toString();	}	/**	 * Return name of this directive.	 */	@Override	public String getName() {		return "block";	}	/**	 * simple init - get the key	 */	@Override	public void init(RuntimeServices rs, InternalContextAdapter context, Node node) throws TemplateInitException {		super.init(rs, context, node);		// the first child is the block name (key)		if (node.jjtGetNumChildren() == 2) {			// first token is the name of the block			key = node.jjtGetChild(0).getFirstToken().image;			key = DEFINE_DIRECTIVE.concat(key.substring(1, key.length() - 1));			// default max depth of two is used			maxDepth = rs.getInt(RuntimeConstants.DEFINE_DIRECTIVE_MAXDEPTH, 2);		} else {			throw new VelocityException("parameter missing: block name at " + Log.formatFileString(this));		}	}	/**	 * directive.render() simply makes an instance of the Block inner class and places it into the context as indicated.	 */	@Override	@SuppressWarnings("unchecked")	public boolean render(InternalContextAdapter context, Writer writer, Node node) {		Node nodeParent = node.jjtGetChild(1);		Writer out = new StringWriter();		try {			nodeParent.render(context, out);			if (out.toString().equals("")) {				context.put(key, new ArrayList<String>());			} else {				List<String> data = (List<String>) context.get(key);				if (data == null) {					data = new ArrayList<String>();				}				data.add(clearLine(out));				context.put(key, data);			}		} catch (Exception e) {			e.printStackTrace();		}		return true;	}}