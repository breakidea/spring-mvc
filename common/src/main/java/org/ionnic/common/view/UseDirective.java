package org.ionnic.common.view;/* * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *   http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, * software distributed under the License is distributed on an * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY * KIND, either express or implied.  See the License for the * specific language governing permissions and limitations * under the License. */import java.io.IOException;import java.io.Writer;import org.apache.velocity.context.InternalContextAdapter;import org.apache.velocity.exception.MethodInvocationException;import org.apache.velocity.exception.ParseErrorException;import org.apache.velocity.exception.ResourceNotFoundException;import org.apache.velocity.runtime.directive.Directive;import org.apache.velocity.runtime.parser.node.Node;import org.apache.velocity.runtime.parser.node.SimpleNode;/** * Directive that puts an unrendered AST block in the context under the specified key, postponing rendering until the reference is used and rendered. * * @author Andrew Tetlaw * @author Nathan Bubna */public class UseDirective extends Directive {    @Override    public String getName() {        return "use";    }    @Override    public int getType() {        return LINE;    }    @Override    public boolean render(InternalContextAdapter context, Writer writer, Node node) throws IOException, ResourceNotFoundException,            ParseErrorException, MethodInvocationException {        try {            SimpleNode line = (SimpleNode) node.jjtGetChild(0);            String name = (String) line.value(context);            if (context.containsKey(name)) {                Object value = context.get(name);                writer.write(value.toString());            }        } catch (Exception e) {        }        return true;    }}