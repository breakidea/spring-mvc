package org.ionnic.common.view.tool;import java.io.StringWriter;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.velocity.Template;import org.apache.velocity.VelocityContext;import org.apache.velocity.app.VelocityEngine;import org.apache.velocity.context.Context;import org.apache.velocity.exception.VelocityException;import org.apache.velocity.tools.view.ViewToolContext;import org.ionnic.common.Security;import org.ionnic.common.util.TemplateUtils;import org.springframework.util.StringUtils;/** * @author apple * */public class PageTool {    private ViewToolContext context;    private VelocityEngine engine;    /**     * @param name     * @param data     * @return     */    public String exec(String content, Map<String, Object> data) {        try {            data.putAll(context.getToolbox());            return TemplateUtils.renderTemplate(content, data);        } catch (Exception e) {            e.printStackTrace();        }        return "";    }    /**     * @return     */    public String getToken() {        HttpServletRequest request = context.getRequest();        return Security.generateToken(request);    }    /**     * @param urlName     * @param param     * @return     */    public String getURI(String urlName) {        HttpServletRequest req = context.getRequest();        if (!urlName.startsWith("/")) {            urlName = "/" + urlName;        }        return req.getContextPath() + urlName;    }    /**     * @param templateName     * @return     */    public String include(String templateName) {        return render(templateName, ".html", null);    }    /**     * @param templateName     * @param data     * @return     */    public String external(String templateName, Map<String, Object> data) {        return render(templateName, ".vm", data);    }    /**     * 请求级别的初始化函数     *     * @param obj     * @throws Exception     */    public void init(Object object) {        context = (ViewToolContext) object;        context.getRequest();        // 缓存起来        engine = context.getVelocityEngine();    }    /**     * @param ext     * @param name     * @param data     * @return     */    private String render(String templateName, String extension, Map<String, Object> map) {        StringWriter writer = new StringWriter();        try {            String ext = StringUtils.getFilenameExtension(templateName);            if (ext == null) {                templateName += extension;            }            Template tpl = engine.getTemplate(templateName);            Context data = null;            if (map != null) {                map.putAll(context.getToolbox());                data = new VelocityContext(map);            } else {                data = new VelocityContext();            }            tpl.merge(data, writer);        } catch (VelocityException e) {            e.printStackTrace();        }        return writer.toString();    }}