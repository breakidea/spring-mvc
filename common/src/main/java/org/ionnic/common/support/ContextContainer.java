package org.ionnic.common.support;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.ionnic.common.http.BaseMethodArgumentResolver;import org.springframework.ui.ExtendedModelMap;import org.springframework.ui.ModelMap;import org.springframework.web.method.support.ModelAndViewContainer;import org.springframework.web.servlet.View;/** * Holder for both Model and View in the web MVC framework. * Note that these are entirely distinct. This class merely holds * both to make it possible for a controller to return both model * and view in a single return value. * * <p>Represents a model and view returned by a handler, to be resolved * by a DispatcherServlet. The view can take the form of a String * view name which will need to be resolved by a ViewResolver object; * alternatively a View object can be specified directly. The model * is a Map, allowing the use of multiple objects keyed by name. * * @author nqliujiangtao@gmail.com * @see BaseMethodArgumentResolver */public class ContextContainer {    private ExtendedModelMap model;    private ModelMap data = new ModelMap();    private ModelAndViewContainer containner;    private HttpServletRequest request;    private HttpServletResponse response;    /**     * @param response     * @param request     * @param mavContainer     */    public ContextContainer(HttpServletRequest request, HttpServletResponse response, ModelAndViewContainer mavContainer) {        containner = mavContainer;        this.request = request;        this.response = response;        model = (ExtendedModelMap) containner.getModel();        model.addAttribute("data", data);        setStatus(0);        setStatusInfo("OK");    }    public void clean() {        model.clear();    }    /**     * @param keyName     * @return     */    public boolean contains(String keyName) {        return containner.containsAttribute(keyName);    }    /**     * @return     */    public ExtendedModelMap getModel() {        return model;    }    public HttpServletRequest getRequest() {        return request;    }    public HttpServletResponse getResponse() {        return response;    }    public HttpSession getSession() {        return null;    }    public View getView() {        return (View) containner.getView();    }    public boolean isRequestHandled() {        return containner.isRequestHandled();    }    /**     * @param keyName     * @param value     */    public void put(String keyName, Object value) {        data.addAttribute(keyName, value);    }    /**     * @param attributes     */    public void putAll(Map<String, ?> attributes) {        data.mergeAttributes(attributes);    }    /**     * @param keyName     */    public void remove(String... keyName) {        for (int i = 0; i < keyName.length; i++) {            data.remove(keyName);        }    }    /**     * @param status     */    public void setStatus(int status) {        model.addAttribute("status", status);    }    /**     * @param object     */    public void setStatusInfo(Object object) {        model.addAttribute("statusInfo", object);    }    /**     * @param view     */    public void setView(View view) {        containner.setView(view);    }    /**     * @param viewName     */    public void setViewName(String viewName) {        containner.setViewName(viewName);    }}