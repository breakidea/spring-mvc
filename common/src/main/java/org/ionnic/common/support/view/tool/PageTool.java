package org.ionnic.common.support.view.tool;import java.io.StringWriter;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.velocity.VelocityContext;import org.apache.velocity.app.VelocityEngine;import org.apache.velocity.context.Context;import org.apache.velocity.tools.view.ViewToolContext;import org.ionnic.common.support.Security;/** * @author apple * */public class PageTool {    private static ViewToolContext context;    private static VelocityEngine engine;    private HttpServletRequest request;    /**     * @return     */    public String getToken() {        return Security.generateToken(request);    }    /**     * @param urlName     * @param param     * @return     */    public String getUrl( String urlName ) {        if (!urlName.startsWith("/")) {            urlName = "/" + urlName;        }        return request.getContextPath() + urlName;    }    /**     * 请求级别的初始化函数     *     * @param obj     * @throws Exception     */    public void init( Object object ) {        context = (ViewToolContext) object;        request = context.getRequest();        // 缓存起来        engine = context.getVelocityEngine();    }    /**     * @param templateName     * @return     */    public static StringWriter loadTemplate( String templateName ) {        return loadTemplate(templateName, null);    }    /**     * @param templateName     * @param map     * @return     */    public static StringWriter loadTemplate( String templateName, Map<String, Object> map ) {        StringWriter sw = new StringWriter();        try {            sw = render(templateName, map);        } catch (Exception e) {            // TODO: handle exception        }        return sw;    }    /**     * @param ext     * @param name     * @param data     * @return     */    private static StringWriter render( String templateName, Map<String, Object> map ) throws Exception {        StringWriter writer = new StringWriter();        Context data = null;        if (map != null) {            map.putAll(context.getToolbox());        }        data = new VelocityContext(map);        // get the template and render        engine.getTemplate(templateName).merge(data, writer);        return writer;    }    /**     * @return     */    public Context getContext() {        return context.getVelocityContext();    }}