/*
 * A user experience optimization script.
 *
 * author:  mycoin (nqliujiangtao@gmail.com)
 * date:    2014/04/14
 * resp:    https://github.com/mycoin/moni-log
 */
(function(window, undefined) {
    'use strict';

    // 全局对象
    var W = window,
        D = document,
        N = navigator,
        U = N.userAgent,
        S = W.screen,
        L = W.location;

    // 当前时间
    var T = new Date();

    // UV统计数据， G全局参数， C全局配置，J离开日志
    var V = {},
        G = {},
        C = {},
        J = {};

    /**
     * Copy properties from the source object to the target object
     *
     * @public
     * @param {Object} target the target object
     * @param {Object} source the source object
     * @param {Boolean} overwrite if overwrite the same property, default 'true'
     * @return target
     */
    function extend(target, source, overwrite) {
        if (undefined === overwrite) {
            overwrite = true;
        }
        for (var key in source || {}) {
            if (source.hasOwnProperty(key) && (overwrite || !target.hasOwnProperty(key))) {
                target[key] = source[key];
            }
        }
        return target;
    }

    /**
     * strip whitespace from the beginning and end of a string
     *
     * @function
     * @public
     *
     * @param source {String} the target string that will be trimmed.
     * @return {string} the trimed string
     */
    function trim(string) {
        if (string === undefined || string === '') {
            return '';
        }
        return ('' + string).replace(/^[\s\xa0\u3000]+|[\u3000\xa0\s]+$/g, '');
    }

    /**
     * cookie operation
     *
     * @public
     * @param {string} name the cookie name string
     * @param {string} ..
     * @return value
     */
    function cookie(name, value, path, day) {
        if (arguments.length > 1) {
            var now = new Date();
            now.setTime(now.getTime() + 864e5 * (day || 365));
            D.cookie = name + '=' + escape(value) + '; path=' + (path || '/') + '; expires=' + now.toGMTString();
        } else {
            var match = D.cookie.match(new RegExp('(^| )' + name + '=([^;]*)(;|$)'));
            return match ? unescape(match[2]) : null;
        }
    }

    /**
     * JSON转换
     *
     * @public
     * @param {string} string the cookie name string
     * @param {boolean} silence
     * @return value
     */
    function parseJson(string) {
        string = string || '';
        var ret;
        if (string.substr(0, 1) == '{' && string.substr(-1) == '}') {
            ret = new Function('return ' + string)(); // jshint ignore:line
            for (var k in ret) {
                return ret;
            }
        }
    }

    /**
     * returns a non-standard random IDs of arbitrary length and radix.
     * @return {string} the result
     * @see http://www.broofa.com/2008/09/javascript-uuid-function/
     */
    function getGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(iterator) {
            var random = Math.random() * 16 | 0;
            random = iterator == 'x' ? random : random & 3 | 8;
            return random.toString(16);
        });
    }

    /**
     * format time
     * @param time {Date} 日期对象
     * @param useCapture {Boolean}
     */
    function setTime(time) {
        return (time || new Date()).getTime().toString(36);
    }

    /**
     * get element's xPath
     *
     * @param element {Element} element
     * @param path {Array}
     */
    function getXPath(element, path) {
        path = path || [];
        if (element.parentNode && element.nodeType == 1) {
            path = getXPath(element.parentNode, path);
        }
        var count;
        if (element.previousSibling) {
            count = 1;
            var sibling = element.previousSibling;
            do {
                if (sibling.nodeType == 1 && sibling.nodeName == element.nodeName) {
                    count++;
                }
                sibling = sibling.previousSibling;
            } while (sibling);
        }
        if (element.nodeType == 1) {
            path.push(element.nodeName.toLowerCase() + (count > 1 ? count : ''));
        }
        return path;
    }

    /**
     * 添加监听事件
     * @param element {Element} 注册方法的对象
     * @param type {String} 要注册方法的事件
     * @param listener {Function} 面加载完毕的回调方法
     * @param useCapture {Boolean}
     */
    function bind(el, type, listener) {
        if (el.addEventListener) {
            el.addEventListener(type, listener, false);
        } else if (el.attachEvent) {
            el.attachEvent('on' + type, listener);
        } else {
            el['on' + type] = listener;
        }
        return listener;
    }

    /**
     * 请求统计行动，将数据通知给服务器
     * @param {Array|string|Object} query 数据字符串或者对象
     */
    function request(type, data) {
        var url = [],
            el = W['T\uFEFF'] = new Image();

        // 全局参数不得重写
        extend(data, G, true);
        el.onload = el.onerror = el.onabort = function() {
            el.onload = el.onerror = el.onabort = null;

            // 这里必须销毁el变量
            el = W['T\uFEFF'] = null;
        };
        for (var k in data) {
            url.push(k + '=' + encodeURIComponent(trim(data[k])));
        }
        el.src = location.protocol + '//www.ionnic.org/www/w.gif?type=' + type + '&' + url.join('&');
    }

    /**
     * @全局参数
     *
     * sid:  网站主唯一标示
     * cid:  跟踪用户唯一标记，默认从Cookie('CID')里面读取
     * lt:   进入页面的时间，配合 `cid` 跟踪一次访问PV
     * u:    统计维度，一般为当前页面的URL地址
     * title:页面标题，用于统计报表的标题显示
     * v:    版本号码
     */
    function init() {
        G.lt = setTime(T);
        G.title = document.title;
        G.sid = '$!{siteId}';

        if (!(G.cid = cookie('CID')) || !/^[\S-]{36}$/.test(G.cid)) {
            // 如果没有 cookie('CID') 则表示新访问用户，设置为 `1`
            J.nu = 1;
            cookie('CID', G.cid = getGuid());
        }

        G.u = G.u || L.href;
        G.v = '$!{version}';

        C.autoEnable = true;
    }

    /* @访问统计[0]
     *
     * app:  浏览器类型[chrome,ie,firefox,safari,360se,tt,...],[版本号码]
     * cl:   颜色位，例如 32bit,64bit
     * scr:  屏幕尺寸相关信息 [1280x800]
     * charset: 编码类型 例如 [utf-8]
     * os:   操作系统类型
     * lang: 语言类型，操作系统语言 例如 en-US
     * tz:   时区
     * domain:域名名称
     * je:   Java 是否安装 [0,1]
     * ce:   cookie 是否安装 [0,1]
     * se:   搜索引擎类型 [baidu,google,bing,yahoo]
     * sword:搜索关键词 如果有 `se` 字段必须填写，默认 `-`
     * rt:   所有资源ready的时间戳,36进制
     */
    function access() {
        //app,cl,scr,charset,os,lang,tz,domain
        // 操作系统类型
        if (/ Mobile\/i/.test(U) && U.match(/iPad|iPod|iPhone/i)) {
            V.os = 'ios';
        } else if (/Symbian|NOKIA/i.test(U)) {
            V.os = 'symbian';
        } else if (/ Android/i.test(U)) {
            V.os = 'android';
        } else if (/windows|win32/i.test(U)) {
            V.os = 'windows';
        } else if (/macintosh|mac_powerpc/i.test(U)) {
            V.os = 'mac';
        } else if (/linux/i.test(U)) {
            V.os = 'linux';
        } else if (/rhino/i.test(U)) {
            V.os = 'rhino';
        } else if (/PhantomJS/i.test(U)) {
            V.os = 'phantom';
        } else {
            V.os = N.platform || '-';
        }

        // 浏览器类型
        if (/BIDUBrowser/gi.test(U) && typeof W.external.GetVersion != 'undefined') {
            // 百度浏览器
            V.app = 'baidu';
        } else if (/theworld/gi.test(U)) {
            // 世界之窗浏览器
            V.app = 'tw';
        } else if (/qqbrowser/gi.test(U) || /chrome/gi.test(U) && /qqbrowser/gi.test(U)) {
            // QQ浏览器
            V.app = 'qq';
        } else if (/se /gi.test(U)) {
            // 搜狗浏览器
            V.app = 'sougou';
        } else if (/(360se|360chrome)/gi.test(U)) {
            // 360浏览器
            V.app = '360se';
        } else if (/greenbrowser/gi.test(U)) {
            // 绿色浏览器
            V.app = 'green';
        } else if (/tencenttraveler/gi.test(U)) {
            // TT浏览器
            V.app = 'tt';
        } else if (/maxthon/gi.test(U)) {
            // 傲游浏览器
            V.app = 'maxthon';
        } else if (/krbrowser/gi.test(U)) {
            // KR浏览器
            V.app = 'kr';
        } else {
            V.app = U.match(/(msie|chrome|safari|firefox|opera)/i);
            V.app = V.app ? V.app[0] : '';
            if (V.app.toLowerCase() == 'msie') {
                V.app = U.match(/MSIE[^;]+/i);
                V.app = V.app[0];
            }

            V.app = V.app || '-';
        }

        // 颜色位，例如 32bit,64bit
        V.cl = S.colorDepth + 'bit';

        // 编码类型
        V.charset = (D.characterSet || D.charset || '').toLowerCase();

        // 屏幕尺寸相关信息 [1280*800]
        V.scr = S.width + '*' + S.height;

        // 获取浏览器语言
        V.lang = N.browserLanguage || N.language;

        // 获取时区
        V.tz = -new Date().getTimezoneOffset() / 60;

        // 域名名称
        V.domain = L.hostname || L.host;

        // Java 是否安装 [0,1]
        V.je = N.javaEnabled() ? 1 : 0;

        // cookie 是否安装 [0,1]
        V.ce = N.cookieEnabled ? 1 : 0;

        // 获取搜索引擎
        (function() {
            var refer = document.referrer || '';
            var domain = refer.split('.')[1];
            var q = {
                baidu: 'wd',
                google: 'q',
                soso: 'w',
                yodao: 'q',
                bing: 'q',
                yahoo: 'q',
                sogou: 'query',
                gougou: 'search',
                '360': 'q'
            }[domain];

            if (refer && q) {
                var reg = refer.match(new RegExp('[\?&]' + q + '=([^&]*)', 'i'));
                V.se = domain;
                V.sword = reg ? decodeURIComponent(reg[1]) : '-';
                V.refer = refer;
            }
        })();

        // DOMready的时间戳,36进制
        V.dt = setTime(T);

        // 所有资源ready的时间戳,36进制
        V.rt = V.rt || 'NaN';
    }

    /* xpath:节点路径
     * url:  超链接地址、图片地址，有 `g` 的时候必须传递该参数
     * g:    节点特征 | A对应link，按钮对应btn，其他按照CSS映射关系读取
     * txt:  20字以内文本信息，如果有 `g`
     * pos:  坐标位置
     * et:   事件发生的时间
     */
    function click(event) {
        event = event || W.event || {};

        // 兼容事件源
        var ele = event.target || event.srcElement;

        // 事件属性数据
        var K = {};

        // 自定义类型
        var clazzMap = {
            title: 'OP_LOG_TITLE',
            link: 'OP_LOG_LINK',
            img: 'OP_LOG_IMG',
            btn: 'OP_LOG_BTN',
            others: 'OP_LOG_OTHERS'
        };

        // loop局部变量
        var type = '',
            // 点击目标地址
            url,
            // 统计展示文案
            text = '',
            // 节点特征数据
            data = {};

        K.xpath = getXPath(ele, []).join('-').replace('html-body-', '');

        // 冒泡获取节点参数
        while (ele && ele.nodeType == 1) {
            var tag = ele.tagName.toLowerCase();

            // 忽略本次点击事件
            if (!K.xpath || ele.getAttribute('data-nolog') == '1') {
                return true;
            }
            if (/^(a|img|input|button)$/.test(tag)) {
                type = {
                    a: 'link',
                    img: 'img'
                }[tag] || 'btn' || type;

                // 非输入框的点击都作为 btn 类型
                if (/^(rad|che|but|sub|res|ima)/.test(ele.type)) {
                    type = 'btn';
                    text = text || ele.title || ele.alt || ele.value;
                } else {
                    text = text || ele.innerText || ele.textContent || ele.innerHTML;
                }
                // 注意顺序，优先选择连接
                if (url = ele.href || ele.src || url) { // jshint ignore:line
                    K.url = url;
                }
            }
            for (var k in clazzMap) {
                if (ele.className.lastIndexOf(clazzMap[k]) > -1) {
                    // 注意顺序，优先选择CLASS
                    type = K.g = k || K.g;
                    break;
                }
            }
            var attr = ele.getAttribute('data-click');
            if ((attr = parseJson(attr)) && extend(data, attr, false)) {

                // 反转数据，内层优先
                K.g = K.g || type;
            }

            ele = ele.parentNode;
        }

        // 记录时间
        J.last = new Date();

        /* fm:      日志特征码，取值为[ppim,beha,alop,sk]
         * rsv_*    用户自定义的参数，一般为报表指标
         * F,1~3    预留字段， 如果 `fm` 为 `ppim,sk` 必须提供 `F` 字段功能ID
         *
         * `注意`：  其他所有参数都会被删除
         */
        if (['ppim', 'beha', 'alop', 'sk'].lastIndexOf(data.fm) > -1) {
            K.fm = data.fm;
            K.F = data.F || '';
            for (var key in data) {
                if (/^(rsv_[\w]+|F[1-3])$/.test(key)) {
                    K[key] = data[key];
                }
            }
        }

        K.g = K.g || type;
        K.text = K.text || text;
        K.pos = screen.availWidth + ',' + screen.availHeight + '|' + event.pageX + ',' + event.pageY;
        K.et = setTime(J.last);

        // send
        K.g && request(2, K); // jshint ignore:line
    }

    // 初始化
    init();

    // 访问统计
    access();

    bind(D, 'mousedown', function(event) {
        C.autoEnable && click(event); // jshint ignore:line
    });

    if (D.readyState == 'complete') {
        V.rt = setTime();
        request(1, V);
    } else {
        // 绑定事件
        bind(W, 'load', function(event) {
            // 所有资源ready的时间戳,36进制
            V.rt = setTime();
            request(1, V);
        });
    }
})(window);

/*
CREATE TABLE `org` (
  `type` tinyint(2) NOT NULL COMMENT '日志类型',
  `os` varchar(16) DEFAULT NULL COMMENT '操作系统',
  `app` varchar(16) DEFAULT NULL COMMENT '浏览器类型',
  `cl` varchar(16) DEFAULT NULL COMMENT '颜色位',
  `charset` varchar(16) DEFAULT NULL COMMENT '编码类型',
  `scr` varchar(256) DEFAULT NULL COMMENT '屏幕尺寸',
  `lang` varchar(256) DEFAULT NULL COMMENT '浏览器语言',
  `tz` tinyint(2) DEFAULT NULL COMMENT '时区',
  `domain` varchar(64) DEFAULT NULL COMMENT '域名名称',
  `je` tinyint(1) DEFAULT NULL COMMENT 'Java',
  `ce` tinyint(1) DEFAULT NULL COMMENT 'cookie',
  `se` varchar(16) DEFAULT NULL COMMENT '搜索引擎',
  `sword` varchar(64) DEFAULT NULL COMMENT '关键词',
  `refer` varchar(256) DEFAULT NULL COMMENT '流量来源',
  `dt` timestamp NULL DEFAULT NULL COMMENT 'DOMready',
  `lt` timestamp NULL DEFAULT NULL COMMENT '进入页面的时间',
  `title` varchar(64) DEFAULT NULL COMMENT '标题',
  `sid` varchar(32) NOT NULL COMMENT '网站主唯一标示',
  `cid` varchar(32) NOT NULL COMMENT '用户唯一标记',
  `u` varchar(512) DEFAULT NULL COMMENT '统计维度',
  `v` varchar(16) NOT NULL COMMENT '版本号码',
  `xpath` varchar(1024) DEFAULT NULL COMMENT 'XPath',
  `url` varchar(512) DEFAULT NULL COMMENT '当前地址',
  `fm` enum('ppim','beha','alop','sk') DEFAULT NULL COMMENT '日志特征码',
  `text` varchar(64) DEFAULT NULL COMMENT '文本信息',
  `pos` varchar(16) DEFAULT NULL COMMENT '坐标位置',
  `et` timestamp NULL DEFAULT NULL COMMENT '事件时间',
  `F` varchar(32) DEFAULT NULL COMMENT '预留字段（广告）',
  `F1` varchar(32) DEFAULT NULL COMMENT '预留字段',
  `F2` varchar(32) DEFAULT NULL COMMENT '预留字段',
  `F3` varchar(32) DEFAULT NULL COMMENT '预留字段',
  `rsv_map` tinytext COMMENT '用户参数',
  `g` varchar(16) DEFAULT NULL COMMENT '节点特征'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
*/